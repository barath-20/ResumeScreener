"""init schema with user extras, job.created_by, resume

Revision ID: c9f93034cc69
Revises: 
Create Date: 2025-09-19 14:35:56.754289

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c9f93034cc69'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # 1) user table: add name (nullable) and role (non-null, default 'user'), then drop default
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=120), nullable=True))
        batch_op.add_column(sa.Column('role', sa.String(length=20), nullable=False, server_default='user'))
        batch_op.alter_column('username', existing_type=sa.VARCHAR(length=80), nullable=True)

    # Remove server_default for role now that existing rows are populated
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('role', server_default=None)

    # 2) job_posting: add created_by as nullable, backfill from user_id, set NOT NULL, add FK, drop old FK/column
    with op.batch_alter_table('job_posting', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))

    # Backfill created_by from user_id where possible
    op.execute("UPDATE job_posting SET created_by = user_id WHERE created_by IS NULL")

    # Now enforce NOT NULL and FK
    with op.batch_alter_table('job_posting', schema=None) as batch_op:
        batch_op.alter_column('created_by', existing_type=sa.Integer(), nullable=False)
        # Drop existing FK on user_id if present
        try:
            batch_op.drop_constraint(batch_op.f('job_posting_user_id_fkey'), type_='foreignkey')
        except Exception:
            pass
        batch_op.create_foreign_key(None, 'user', ['created_by'], ['id'])
        # Finally drop user_id column
        try:
            batch_op.drop_column('user_id')
        except Exception:
            pass

    # 3) Create resume table if not exists
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS resume (
            id SERIAL PRIMARY KEY,
            original_filename VARCHAR(255) NOT NULL,
            filename VARCHAR(255) NOT NULL,
            file_path VARCHAR(512) NOT NULL,
            status VARCHAR(50) DEFAULT 'uploaded' NOT NULL,
            score FLOAT,
            upload_date TIMESTAMP WITHOUT TIME ZONE,
            processed_data JSON,
            job_id INTEGER NOT NULL REFERENCES job_posting (id),
            user_id INTEGER NOT NULL REFERENCES "user" (id)
        )
        """
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=80),
               nullable=False)
        batch_op.drop_column('role')
        batch_op.drop_column('name')

    with op.batch_alter_table('job_posting', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('job_posting_user_id_fkey'), 'user', ['user_id'], ['id'])
        batch_op.drop_column('created_by')

    # ### end Alembic commands ###
